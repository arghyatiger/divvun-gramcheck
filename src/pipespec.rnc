# Copyright (C) 2017, Kevin Brubeck Unhammer <unhammer@fsfe.org>

# This program is free software: you can redistribute it and/or modify

# it under the terms of the GNU General Public License as published by

# the Free Software Foundation, either version 3 of the License, or

# (at your option) any later version.

# This program is distributed in the hope that it will be useful,

# but WITHOUT ANY WARRANTY; without even the implied warranty of

# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the

# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License

# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# 
# *** WORK IN PROGRESS ***
# 
# Må kunna ha fleire alternative pipelines:
# 
#   pipeline_1=hfst-tokenise foo.hfst | vislcg3 -g foo.cg3 | cg-foo | divvun-suggest bar
#   pipeline_2=m4runner punct.m4
# 
# For kvar pipeline, må kunne spesifisera kvart brukarval og kva verknad
# dei har på pipelinen:
# 
# | Brukarval     |  $1  |  $2                  |  $3  |
# |–––––––––––––––+––––––+––––––––––––––––––––––+––––––|
# | realword      | 2,3,7| cat                  | cat  |
# | teiknsetjing  | 1,3  | cat                  | B    |
# | dialektx      | 1,5  | stat-munge ngram.bin | B    |
# 
#   combiner($1)=concat
#   combiner($2)=union
#   combiner($3)=union
# 
# Til dømes:
# 
#   pipeline_1=hfst–tokenise foo.hfst | vislcg3 –g foo.cg3 ––sections=$1 | $2 | $3 | cg–foo | divvun–suggest bar
# 
# Me unngår
# 
#   pipeline_1=hfst–tokenise foo.hfst | vislcg3 –g foo.cg3 ––sections=1,3,1,5 | $2 | BB | cg–foo | divvun–suggest bar
# 
# sidan {{$3}} er union, så når både teiknsetjing og dialektx er valt, så vil me ha berre B.
# 
# * viss dialektx, så skru på sections 1 og 5 i cg, og legg til statistisk dings
# 
# 
#

#  Root element:

pipespec = element pipespec { attlist.pipespec, pipeline+ }
attlist.pipespec &=

  attribute language { text },
  attribute developer { text }?,
  attribute copyright { text }?,
  attribute contact { text }?,
  attribute version { text }?,
  attribute depversions { text }?
# == pipespec attributes ==
#   language:    BCP-47, default language code for pipelines in this spec
#   contact:     typically an e-mail address
#   version:     version of this module
#   depversions: versions of sub-modules used by the pipeline, e.g. hfst
pipeline =
  element pipeline {
    attlist.pipeline,
    prefs?,
    (sh | cg | tokenize | tokenise | mwesplit | suggest)+
  }
attlist.pipeline &=

  attribute name { xsd:ID },
  attribute language { text }?,
  attribute type { text }?
# == pipeline attributes ==
#   name:        user-readable, but unique name of the pipeline
#   language:    BCP-47, may override the language code of the pipespec
prefs = element prefs { attlist.prefs, pref+ }
attlist.prefs &= empty

pref = element pref { attlist.pref, option+ }
attlist.pref &=

  attribute type { text },
  attribute name { text }
# type and name are *not* unique here; several pipelines may have a pref for e.g. "Oxford comma"
option = element option { attlist.option, label+ }
attlist.option &= attribute err-id { text }

Text = (text | em)*
label = element label { attlist.label, Text }
attlist.label &= attribute xml:lang { text }

# General "system" command – pipelines with this can only be used
# in settings where we can open processes:
sh = element sh { attlist.sh, arg* }
attlist.sh &= attribute prog { text }

# Library-based commands – no IPC/process open() required since
# these just use linked libraries:
cg = element cg { attlist.cg, arg }
attlist.cg &= empty

# arg: grammar.cg3
tokenize = element tokenize { attlist.tokenize, arg }
attlist.tokenize &= empty

# arg: tokeniser.pmhfst
tokenise = element tokenise { attlist.tokenise, arg }
attlist.tokenise &= empty

# en_GB alias of the above
mwesplit = element mwesplit { attlist.mwesplit, empty }
attlist.mwesplit &= empty

# takes no arguments
suggest = element suggest { attlist.suggest, arg, arg }
attlist.suggest &= empty

# arg1: generator.hfstol, arg2: error_messages.xml
arg = element arg { attlist.arg, empty }
attlist.arg &= attribute n { text }

em |= notAllowed
start = pipespec
